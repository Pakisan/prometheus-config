package com.github.pakisan.prometheus.config.scrape;

import com.github.pakisan.prometheus.config.PrometheusTlsConfig;
import com.github.pakisan.prometheus.config.auth.PrometheusScrapeAuthorization;
import com.github.pakisan.prometheus.config.auth.PrometheusScrapeBasicAuth;
import com.github.pakisan.prometheus.config.auth.PrometheusScrapeOAuth2;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.validation.constraints.Pattern;
import java.util.List;
import java.util.Map;

/**
 * Describes Prometheus scrape_config section.
 * <p>
 * A scrape_config section specifies a set of targets and parameters describing how to scrape them.
 * In the general case, one scrape configuration specifies a single job. In advanced configurations, this may change.
 * <p>
 * Targets may be statically configured via the static_configs parameter or dynamically discovered using one of the
 * supported service-discovery mechanisms.
 * <p>
 * Additionally, relabel_configs allow advanced modifications to any target and its labels before scraping.
 *
 * @since  1.0.0
 * @see <a href="https://prometheus.io/docs/prometheus/latest/configuration/configuration/#scrape_config">scrape_config</a>
 * @author Pavel Bodiachevskii
 */
@Data
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class PrometheusScrapeConfig {

    /**
     * The job name assigned to scraped metrics by default.
     */
    private String job_name;

    /**
     * How frequently to scrape targets from this job.
     * <p>
     * default = &lt;global_config.scrape_interval&gt;
     */
    @Pattern(regexp = "((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)")
    private String scrape_interval;

    /**
     * Per-scrape timeout when scraping this job.
     * <p>
     * default = &lt;global_config.scrape_timeout&gt;
     */
    @Pattern(regexp = "((([0-9]+)y)?(([0-9]+)w)?(([0-9]+)d)?(([0-9]+)h)?(([0-9]+)m)?(([0-9]+)s)?(([0-9]+)ms)?|0)")
    private String scrape_timeout;

    /**
     * The HTTP resource path on which to fetch metrics from targets.
     */
    @Builder.Default
    private String metrics_path = "/metrics";

    /**
     * honor_labels controls how Prometheus handles conflicts between labels that are
     * already present in scraped data and labels that Prometheus would attach
     * server-side ("job" and "instance" labels, manually configured target
     * labels, and labels generated by service discovery implementations).
     * <p>
     * If honor_labels is set to "true", label conflicts are resolved by keeping label
     * values from the scraped data and ignoring the conflicting server-side labels.
     * <p>
     * If honor_labels is set to "false", label conflicts are resolved by renaming
     * conflicting labels in the scraped data to "exported_<original-label>" (for
     * example "exported_instance", "exported_job") and then attaching server-side
     * labels.
     * <p>
     * Setting honor_labels to "true" is useful for use cases such as federation and
     * scraping the Pushgateway, where all labels specified in the target should be
     * preserved.
     * <p>
     * Note that any globally configured "external_labels" are unaffected by this
     * setting. In communication with external systems, they are always applied only
     * when a time series does not have a given label yet and are ignored otherwise.
     */
    private boolean honor_labels = false;

    /**
     * honor_timestamps controls whether Prometheus respects the timestamps present
     * in scraped data.
     * <p>
     * If honor_timestamps is set to "true", the timestamps of the metrics exposed
     * by the target will be used.
     * <p>
     * If honor_timestamps is set to "false", the timestamps of the metrics exposed
     * by the target will be ignored.
     */
    private boolean honor_timestamps = true;

    /**
     * Configures the protocol scheme used for requests.
     */
    private PrometheusScrapeScheme scheme = PrometheusScrapeScheme.HTTP;

    /**
     * Optional HTTP URL parameters.
     */
    private Map<String, List<String>> params;

    /**
     * Sets the `Authorization` header on every scrape request with the
     * configured username and password.
     * password and password_file are mutually exclusive.
     */
    private PrometheusScrapeBasicAuth basic_auth;

    /**
     * Sets the `Authorization` header on every scrape request with
     * the configured credentials.
     */
    private PrometheusScrapeAuthorization authorization;

    /**
     * Optional OAuth 2.0 configuration.
     * <p>
     * Cannot be used at the same time as basic_auth or authorization.
     */
    private PrometheusScrapeOAuth2 oauth2;

    /**
     * Configure whether scrape requests follow HTTP 3xx redirects.
     */
    private boolean follow_redirects = true;

    /**
     * Whether to enable HTTP2.
     */
    private boolean enable_http2 = true;

    /**
     * Configures the scrape request's TLS settings.
     */
    private PrometheusTlsConfig tls_config;

    /**
     * Optional proxy URL.
     */
    private String proxy_url;

    /**
     * Comma-separated string that can contain IPs, CIDR notation, domain names
     * that should be excluded from proxying. IP and domain names can
     * contain port numbers.
     */
    private String no_proxy;

    /**
     * Use proxy URL indicated by environment variables (HTTP_PROXY, https_proxy, HTTPs_PROXY, https_proxy, and no_proxy)
     */
    private boolean proxy_from_environment = false;

    /**
     * Specifies headers to send to proxies during CONNECT requests.
     */
    private Map<String, List<String>> proxy_connect_header;

}
